name: task - validate commit on master
on:
  push:
    branches: [ master ]

jobs:
  lint-staticChecks-test-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup actions.
        uses: actions/checkout@v2


#      - name: validate commit format -- Check if HEAD commit message contains [xyz] or FAIL
#        uses: gsactions/commit-message-checker@v1
#        with:
#          excludeDescription: 'true'                # optional: this excludes the description body of a pull request
#          excludeTitle: 'true'                      # optional: this excludes the title of a pull request
#          pattern: '^\[[^]]+\].+'                   # this pattern will take all commits as input and check weather the head commit have one  [..] block
#          flags: 'g' # more discussion here : https://github.com/GsActions/commit-message-checker/discussions/61,
#          error: 'Your head commit must contain `[..]` like "[BUGFIX] or [SDK-974]".'
#          checkAllCommitMessages: 'true' # optional: this checks all commits associated with a pull request
#          accessToken: ${{ secrets.GITHUB_TOKEN }} # github access token is only required if checkAllCommitMessages is true
#          #pattern: '^[^#].{74}'     error: 'The maximum line length of 74 characters is exceeded.'
#          #pattern: '^.+(Resolves|Fixes): \#[0-9]+$' #  Check for Resolves / Fixes


      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Check lint
        run: ./gradlew lint

      - name: Upload Lint results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: lint_results
          path:  |
            app/build/reports/lint-results-debug.html
            dog_network/build/reports/lint-results-debug.html

      - name: CodeAnalysis via  detekt
        run: ./gradlew detekt

      - name: Upload detekt results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: detekt_results
          path:  |
            app/build/reports/detekt
            dog_network/build/reports/detekt

      - name: CodeAnalysis via  checkstyle
        run: ./gradlew checkstyle

      - name: Upload checkstyle results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: checkstyle_results
          path: |
            app/build/reports/checkstyle
            dog_network/build/reports/checkstyle

      - name: Run Unit Tests And Code Coverage
        run: ./gradlew jacocoTestReportDebug

      - name: Upload Unit tests
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit-tests-results.zip
          path: |
            app/build/reports/tests
            app/build/reports/jacoco

            dog_network/build/reports/tests
            dog_network/build/reports/jacoco

      - name: Generate AAR and APK files
        run: ./gradlew assembleDebug

      - name: Upload AAR files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: unit-tests-results.zip
          path: |
            app/build/outputs/apk/debug/app-debug.apk
            dog_network/build/outputs/aar

      - name: Send custom JSON data to Slack workflow
        id: slack
        if: always()
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "plain_text",
                        "text": "GitHub Action build results üöÄüöÄüöÄ Ô∏è",
                        "emoji": true
                      }
                    },
                    {
                      "type": "divider"
                    },


                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "github context :"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "```json ${{ toJson(github)}}```"
                      }
                    },
                    {
                      "type": "divider"
                    },



                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "steps context :"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "```json ${{ toJson(steps)}}```"
                      }
                    },
                    {
                      "type": "divider"
                    },




                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "job context :"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "```json ${{ toJson(job)}}```"
                      }
                    },
                    {
                      "type": "divider"
                    },




                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "runner context :"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "```json ${{ toJson(runner)}}```"
                      }
                    },
                    {
                      "type": "divider"
                    },




                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "received inputs context :"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "```json ${{ toJson(inputs)}}```"
                      }
                    },
                    {
                      "type": "divider"
                    }

                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

# this type of integration is also cool : https://github.com/voxmedia/github-action-slack-notify-build
#https://raw.githubusercontent.com/voxmedia/github-action-slack-notify-build/main/docs/updating_message.gif
# this slack , hosted by anshsachdeva2013 : https://app.slack.com/client/T037QDTAE9M/C03825HTMJ9