plugins {
    id "com.android.application"
    id "kotlin-android"
    id("io.gitlab.arturbosch.detekt").version("1.20.0-RC1")

}

android {
    compileSdk 31

    defaultConfig {
        applicationId "work.curioustools.dogfinder"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding true
    }
}
detekt {
    //toolVersion = "1.20.0-RC1"                                                      // Version of Detekt that will be used. When unspecified the latest detekt version found will be used. Override to stay on the same version.
    //source = files("src/main/kotlin", "gensrc/main/kotlin")                         // The directories where detekt looks for source files.Defaults to `files("src/main/java", "src/test/java", "src/main/kotlin", "src/test/kotlin")`.
    //config = files("path/to/config.yml")                                            // Define the detekt configuration(s) you want to use. Defaults to the default detekt configuration.
    //buildUponDefaultConfig = false                                                  // Applies the config files on top of detekt's default config file. `false` by default.
    //baseline = file("path/to/baseline.xml")                                         // Specifying a baseline file. All findings stored in this file in subsequent runs of detekt.
    //disableDefaultRuleSets = false                                                  // Disables all default detekt rulesets and will only run detekt with custom rules defined in plugins passed in with `detektPlugins` configuration. `false` by default.
    //ignoredBuildTypes = ["release"]                                                 // Android: Don't create tasks for the specified build types (e.g. "release")
    //ignoredFlavors = ["production"]                                                 // Android: Don't create tasks for the specified build flavor (e.g. "production")
    //ignoredVariants = ["productionRelease"]                                         // Android: Don't create tasks for the specified build variants (e.g. "productionRelease")
    //basePath = projectDir                                                           // Specify the base path for file paths in the formatted reports.If not set, all file paths reported will be absolute file path.

    parallel = true                                                                    // Builds the AST in parallel. Rules are always executed in parallel.Can lead to speedups in larger projects. `false` by default.
    allRules = true                                                                    // Turns on all the rules. `false` by default.
    ignoreFailures = true                                                              // If set to `true` the build does not fail when the maxIssues count was reached. Defaults to `false`.
    debug = true                                                                       // Adds debug output during task execution. `false` by default.

}
tasks.named("detekt").configure {
    reports {
        // Enable/Disable XML report (default: true)
        xml.required.set(false)
        //xml.outputLocation.set(file("build/reports/detekt.xml"))

        // Enable/Disable HTML report (default: true)
        html.required.set(true)
        html.outputLocation.set(file(rootProject.buildDir.toString()+"/reports/detekt-app.html"))

        // Enable/Disable TXT report (default: true)
        txt.required.set(true)
        txt.outputLocation.set(file(rootProject.buildDir.toString()+"/reports/detekt-app.txt"))

        // Enable/Disable SARIF report (default: false)
        sarif.required.set(false)
        //sarif.outputLocation.set(file("build/reports/detekt.sarif"))

        //custom {// The simple class name of your custom report.
        //    reportId = "CustomJsonReport"
        //    outputLocation.set(file("build/reports/detekt.json"))
        //}
    }
}


apply plugin: 'checkstyle'
checkstyle {
    //configFile rootProject.file('checkstyle.xml')
    ignoreFailures false
    showViolations true
    toolVersion = "7.8.1"
}

task Checkstyle(type: Checkstyle) {
    //configFile rootProject.file('checkstyle.xml')
    source 'src/main/java'
    ignoreFailures true
    showViolations true
    include '**/*.java'
    classpath = files()
}

// adds checkstyle task to existing check task
afterEvaluate {
    //todo add in check
//    if (project.tasks.getByName("check")) {
//        check.dependsOn('checkstyle')
//    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.6.0")
    implementation("androidx.appcompat:appcompat:1.3.1")
    implementation("com.google.android.material:material:1.4.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.1")

    //networking
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.github.bumptech.glide:glide:4.12.0")
    annotationProcessor("com.github.bumptech.glide:compiler:4.12.0")

    //concurrency
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")


    // jetpack lifecycles
    def lifecycle_version = "2.3.1"
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")    // ViewModel
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version")     // LiveData
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")     // if using Java8, use the following instead of lifecycle-compiler

    //testing
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2")
    testImplementation("androidx.arch.core:core-testing:2.1.0")
    testImplementation("io.mockk:mockk:1.12.0")
    testImplementation("io.mockk:mockk-agent-jvm:1.12.0")
    testImplementation("junit:junit:4.13.2")
}